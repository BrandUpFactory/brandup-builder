// src/features/template.ts

import { supabase } from '@/lib/supabaseClient'

/**
 * Pr√ºft, ob der Benutzer bereits Zugriff auf ein Template hat
 */
export async function hasAccessToTemplate(userId: string, templateId: string): Promise<boolean> {
  const { data, error } = await supabase
    .from('licenses')
    .select('id')
    .eq('user_id', userId)
    .eq('template_id', templateId)
    .eq('used', true)
    .maybeSingle()

  if (error) {
    console.error('‚ùå Fehler bei Zugriffskontrolle (hasAccessToTemplate):', error)
    return false
  }

  return !!data
}

/**
 * Aktiviert eine Lizenz anhand eines Codes f√ºr ein bestimmtes Template
 */
export async function unlockTemplateWithCode(
  userId: string,
  templateId: string,
  code: string,
  ip?: string,
  userAgent?: string
): Promise<{ success: boolean; message: string }> {
  const cleanedCode = code.trim()

  console.log('üîç Unlock-Versuch gestartet:')
  console.log('‚û°Ô∏è Eingabe-Code:', cleanedCode)
  console.log('‚û°Ô∏è User-ID:', userId)
  console.log('‚û°Ô∏è Template-ID:', templateId)

  // 1. Lizenz anhand des Codes suchen
  const { data: license, error } = await supabase
    .from('licenses')
    .select('*')
    .eq('license_code', cleanedCode)
    .maybeSingle()

  // 2. Fehler bei der Abfrage
  if (error) {
    console.error('‚ùå Fehler bei der Datenbankabfrage (unlockTemplateWithCode):', error)
    return {
      success: false,
      message: '‚ùå Fehler bei der Datenbankabfrage.'
    }
  }

  // 3. Lizenz nicht vorhanden
  if (!license) {
    console.warn('‚ùå Lizenz mit diesem Code wurde nicht gefunden.')
    return {
      success: false,
      message: '‚ùå Dieser Code existiert nicht.'
    }
  }

  // 4. Lizenz wurde bereits verwendet
  if (license.used) {
    console.warn('‚ö†Ô∏è Lizenz wurde bereits verwendet.')
    return {
      success: false,
      message: '‚ö†Ô∏è Dieser Code wurde bereits verwendet.'
    }
  }

  // 5. Lizenz geh√∂rt nicht zum angefragten Template
  if (license.template_id !== templateId) {
    console.warn('‚ö†Ô∏è Lizenz geh√∂rt zu einem anderen Template:', license.template_id)
    return {
      success: false,
      message: '‚ö†Ô∏è Dieser Code geh√∂rt zu einem anderen Template.'
    }
  }

  // 6. Lizenz aktualisieren und Benutzer zuweisen
  const { error: updateError } = await supabase
    .from('licenses')
    .update({
      used: true,
      user_id: userId,
      activation_ip: ip || null,
      activation_device: userAgent || null
    })
    .eq('id', license.id)

  if (updateError) {
    console.error('‚ùå Fehler beim Speichern der Freischaltung:', updateError)
    return {
      success: false,
      message: '‚ùå Fehler beim Speichern der Freischaltung.'
    }
  }

  // 7. Erfolg
  console.log('‚úÖ Lizenz erfolgreich zugewiesen.')
  return {
    success: true,
    message: '‚úÖ Template erfolgreich freigeschaltet!'
  }
}
